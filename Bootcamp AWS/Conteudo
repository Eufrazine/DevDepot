<div>
    <img src="/icons/hexagon-five-sixths_gray.svg" alt="/icons/hexagon-five-sixths_gray.svg" width="40px" /> 
    <strong>Trilhas</strong>
    <ul>
        <li>24 cursos</li>
        <li>1 desafio de projeto</li>
        <li>2 desafios de código</li>
        <li>1 live</li>
        <li>3 mentorias</li>
    </ul>
    <p>Terminar o curso até 08/07</p>
</div>

### - [ ] Princípios de Desenvolvimento de Software Colaborativo

#### Bootcamps DIO: Educação Gratuita e Empregabilidade Juntas!

- Conversando sobre como funciona os BootCamps e como é a DIO.
- Artigo: Gerenciamento de Tempo em Bootcamps

1. Primeiramente, Vamos Entender O Que é Um Bootcamp?

Ao contrário dos cursos convencionais, os Bootcamps são programas intensivos, com duração geralmente curta (variando entre dias a meses), focados em ensinar habilidades ou stacks tecnológicas específicas. 

2. Priorize Suas Tarefas

A chave para um gerenciamento eficaz do tempo é priorizar suas tarefas. É fácil se sobrecarregar com todas as responsabilidades e compromissos que você tem.

3. Faça Um Cronograma

Depois de ter uma ideia clara de suas prioridades, é fundamental elaborar um cronograma. Isso não apenas proporciona uma visão organizada do seu dia ou semana, mas também assegura que você esteja reservando tempo suficiente para cada atividade. 

    Lembre-se de incluir tempo para descanso e relaxamento, pois isso é indispensável para a sua saúde mental e física.

4. Utilize Técnicas de Gerenciamento de Tempo

Diversas técnicas de gerenciamento de tempo podem potencializar sua produtividade.

5. Evite o Multitarefa

Concentre-se em uma atividade de cada vez para garantir a qualidade do que está fazendo e um aprendizado mais eficaz.

6. Colabore e Peça Ajuda

A colaboração é um pilar fundamental dos bootcamps. Diante de desafios, recorra aos seus colegas, navegue pelas questões no Fórum ou Rooms do programa e, se necessário, inicie seus próprios tópicos.

Importante ressaltar que não há uma abordagem única de gerenciamento de tempo que funcione para todos.

#### Versionamento de Código com Git e GitHub

Visão Geral do Curso e Ferramentas

**Introdução**

- Apresentando o curso

- O que é Versionamento de Código

São softwares de controle de versão:
- Registra o histórico de atualizações;
- Gerencia quais foram as alterações, a data, autor, etc;
- Organização, controle e segurança.

**Tipos de Sistemas de Controle de Versão**

Dentre os Sistemas de Controle de Versão (VCS), temos VCS Centralizado (CVCS) - CVS e Subversion & VCS Distribuído (DVCS) - Git e Mercurial.

VCS Centralizado (CVCS)

É um tipo de sistema de controle de versões onde todas as alterações e versões de um projeto são armazenadas em um único servidor central.

VCS Distribuído (DVCS)

O repositório completo e seu histórico são espelhados em todos os computadores dos colaboradores, permitindo trabalho offline e uma maior flexibilidade de workflows.

    Clona o repositório completo, o que inclui histórico de versões, como se fosse um backup.

- O que é Git

Gratuito e Open Source (Código Aberto);
Ramificações (branching) e fusões merging) eficientes;
Leve e rápido.
git commit → grava alterações no repositório
git pull → “puxa” as alterações do repositório remoto para o local (busca e mescla)
git push → “empurra” as alterações do repositório local para o remoto

- O que é GitHub

Plataforma de hospedagem de código para o controle de versão com Git, e colaboração.

github vs git

O git vai fazer o gerenciamento do banco de versões
git é o servidor remoto, que comporta essas versões

- Principais comandos para utilizar no git
1. git init: Inicializa um novo repositório Git no diretório atual.
2. git clone [URL]: Clona um repositório Git existente para o seu computador.
3. git add [arquivo]: Adiciona arquivos ao índice (staging area) para serem incluídos no próximo commit.
4. git commit -m "[mensagem]": Registra as mudanças feitas no repositório e cria um novo commit com uma mensagem descritiva.
5. git status: Exibe o status atual do repositório, mostrando quais arquivos foram modificados, adicionados ou removidos.
6. git pull: Atualiza o repositório local com as mudanças do repositório remoto.
7. git push: Envia os commits locais para o repositório remoto.
8. git branch: Lista todas as branches no repositório.
9. git checkout [nome_branch]: Alterna para outra branch.
10. git merge [nome_branch]: Mescla os commits de uma branch para a branch atual.
11. git log: Exibe um histórico de commits.
12. git remote -v: Lista os repositórios remotos vinculados ao repositório local.
13. git remote add origin [URL]: Adiciona um repositório remoto ao seu repositório local.
14. git remote remove [nome_repositório]: Remove um repositório remoto do seu repositório local.
15. git rm [arquivo]: Remove um arquivo do índice e do diretório de trabalho.

#### Desafios de Projetos: Crie Um Portfólio Vencedor

Preparando um portfólio (ficam salvos na minha conta da DIO, os recrutadores podem ver)

- PBL, Portfólio, Competências e Empregrabilidade

    Aprendizagem Baseada em Projetos (PBL)

    1. Porfólio

    Cada projeto concluído reforça suas habilidades, promove networking e dá destaque ao seus portfólio profissional.

    2. Destaque

    Ao finalizar seus projetos na DIO, você obtém uma certificação de competências, um diferencial importante para abrir portar no mercado de trabalho.

    3. Oportunidades

    Através de Talent Match, você tem acesso às melhores oportunidades de empregos no setor de tecnologia. Vamos ajudá-lo a construir a carreira dos seus sonhos.

    Desenvolva suas habilidades ( Hard Skills e Soft Skills)

- A importância dos Desafios de Projeto na Prática
    - Entendendo o Desafio
    - Sempre iniciar um repositório Git
    - Entrega do projeto (descrição legal)

- [ ] Domínio 1: Conceitos de Nuvem na AWS

    .

- [ ] Domínio 2: Segurança e Conformidade com AWS

    .

- [ ] Domínio 3: Tecnologia e Serviços da Nuvem AWS

    .

- [ ] Domínio 4: Cobrança, Preços e Suporte na AWS

    .

- [ ] Soft Skills na Era Ágil: Conectando pessoas e Oportunidades

    .
</markdown>
